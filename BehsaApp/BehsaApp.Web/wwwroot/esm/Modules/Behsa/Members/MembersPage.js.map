{
  "version": 3,
  "sources": ["external-global:@serenity-is/extensions", "../../../../../Modules/Behsa/Members/MembersPage.ts", "../../../../../Modules/Behsa/Members/MembersGrid.ts", "../../../../../Modules/Behsa/Members/MembersDialog.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", "\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { MembersGrid } from './MembersGrid';\r\n\r\nexport default function pageInit() {\r\n    initFullHeightGridPage(new MembersGrid($('#GridDiv')).element);\r\n}", "import { Decorators, EntityGrid, LookupEditor } from \"@serenity-is/corelib\";\r\nimport { deepClone, Dictionary, first, formatNumber, htmlEncode, notifyError, parseDecimal, parseInteger, parseQueryString, serviceRequest, localText, toId, trimToNull, tryFirst, Lookup } from \"@serenity-is/corelib/q\";\r\nimport { ExcelExportHelper, PdfExportHelper } from \"@serenity-is/extensions\";\r\nimport { Column, FormatterContext, NonDataRow } from \"@serenity-is/sleekgrid\";\r\nimport { CitiesRow, MembersColumns, MembersRow, MembersService } from '../../ServerTypes/Behsa';\r\nimport { MembersDialog } from './MembersDialog';\r\n\nconst fld = MembersRow.Fields;\n\r\n@Decorators.registerClass('BehsaApp.Behsa.MembersGrid')\r\nexport class MembersGrid extends EntityGrid<MembersRow, any> {\r\n    protected getColumnsKey() { return MembersColumns.columnsKey; }\r\n    protected getDialogType() { return MembersDialog; }\r\n    protected getRowDefinition() { return MembersRow; }\r\n    protected getService() { return MembersService.baseUrl; } \r\n\r\n    private pendingChanges: Dictionary<any> = {};\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n\r\n        this.slickContainer.on('change', '.edit:input', (e) => this.inputsChange(e));\r\n    }\r\n\r\n    protected getButtons() {\r\n        var buttons = super.getButtons();\r\n\r\n        buttons.push(ExcelExportHelper.createToolButton({\r\n            grid: this,\r\n            service: MembersService.baseUrl + '/ListExcel',\r\n            onViewSubmit: () => this.onViewSubmit(),\r\n            separator: true\r\n        }));\r\n\r\n        buttons.push({\r\n            title: 'Save Changes',\r\n            cssClass: 'apply-changes-button disabled',\r\n            onClick: e => this.saveClick(),\r\n            separator: true\r\n        });\n\n        buttons.push({\r\n            title: 'Download PDF',\r\n            onClick: e => alert(\"download pdf\"),\r\n            separator: true\r\n        });\r\n\r\n        return buttons;\r\n    }\r\n\r\n    protected onViewProcessData(response) {\r\n        this.pendingChanges = {};\r\n        this.setSaveButtonState();\r\n        return super.onViewProcessData(response);\r\n    }\r\n\r\n    private numericInputFormatter(ctx) {\r\n        if ((ctx.item as NonDataRow).__nonDataRow)\r\n            return htmlEncode(formatNumber(ctx.value, '#0.##'));\r\n\r\n        var klass = 'edit numeric';\r\n        var item = ctx.item as MembersRow;\r\n        var pending = this.pendingChanges[item.Id];\r\n\r\n        if (pending && pending[ctx.column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, ctx.column.field) as number;\r\n\r\n        return \"<input type='text' class='\" + klass +\r\n            \"' data-field='\" + ctx.column.field +\r\n            \"' value='\" + formatNumber(value, '0.##') + \"'/>\";\r\n    }\r\n\r\n    private stringInputFormatter(ctx) {\r\n        if ((ctx.item as NonDataRow).__nonDataRow)\r\n            return htmlEncode(ctx.value);\r\n\r\n        var klass = 'edit string';\r\n        var item = ctx.item as MembersRow;\r\n        var pending = this.pendingChanges[item.Id];\r\n        var column = ctx.column as Column;\r\n\r\n        if (pending && pending[column.field] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, column.field) as string;\r\n\r\n        return \"<input type='text' class='\" + klass +\r\n            \"' data-field='\" + column.field +\r\n            \"' value='\" + htmlEncode(value) +\r\n            \"' maxlength='\" + column.sourceItem.maxLength + \"'/>\";\r\n    }\r\n\r\n\r\n    private selectFormatter(ctx: FormatterContext, idField: string, lookup: Lookup<any>) {\r\n        if ((ctx.item as NonDataRow).__nonDataRow)\r\n            return htmlEncode(ctx.value);\r\n\r\n        var klass = 'edit';\r\n        var item = ctx.item as MembersRow;\r\n        var pending = this.pendingChanges[item.Id];\r\n        var column = ctx.column as Column;\r\n\r\n        if (pending && pending[idField] !== undefined) {\r\n            klass += ' dirty';\r\n        }\r\n\r\n        var value = this.getEffectiveValue(item, idField);\r\n        var markup = \"<select class='\" + klass +\r\n            \"' data-field='\" + idField +\r\n            \"' style='width: 100%; max-width: 100%'>\" +\r\n            \"<option value=''>--</option>\";\r\n        for (var c of lookup.items) {\r\n            let id = c[lookup.idField];\r\n            markup += \"<option value='\" + htmlEncode(id) + \"'\"\r\n            if (id == value) {\r\n                markup += \" selected\";\r\n            }\r\n            markup += \">\" + htmlEncode(c[lookup.textField]) + \"</option>\";\r\n        }\r\n        return markup + \"</select>\";\r\n    }\r\n\r\n    private getEffectiveValue(item, field): any {\r\n        var pending = this.pendingChanges[item.Id];\r\n        if (pending && pending[field] !== undefined) {\r\n            return pending[field];\r\n        }\r\n\r\n        return item[field];\r\n    }\r\n\r\n    protected getColumns() {\r\n        var columns = super.getColumns();\r\n        var num = ctx => this.numericInputFormatter(ctx);\r\n        var str = ctx => this.stringInputFormatter(ctx);\r\n\r\n        first(columns, x => x.field === 'FirstName').format = str;\r\n\r\n        var city = first(columns, x => x.field === fld.CityName);\r\n        city.referencedFields = [fld.CityId];\r\n        city.format = ctx => this.selectFormatter(ctx, fld.CityId, CitiesRow.getLookup());\r\n        first(columns, x => x.field === fld.LastName).format = str;\r\n\r\n        return columns;\r\n    }\r\n\r\n    private inputsChange(e: JQueryEventObject) {\r\n        var cell = this.slickGrid.getCellFromEvent(e);\r\n        var item = this.itemAt(cell.row);\r\n        var input = $(e.target);\r\n        var field = input.data('field');\r\n        var txt = trimToNull(input.val());\r\n        var pending = this.pendingChanges[item.Id];\r\n\r\n        var effective = this.getEffectiveValue(item, field);\r\n        var oldText: string;\r\n        if (input.hasClass(\"numeric\"))\r\n            oldText = formatNumber(effective, '0.##');\r\n        else\r\n            oldText = effective as string;\r\n\r\n        var value;\r\n        if (field === 'FirstName') {\r\n            value = txt;\r\n            console.log(\"firstName value changed:\", value)\r\n        }\r\n        else if (input.hasClass(\"numeric\")) {\r\n            var i = parseInteger(txt ?? '');\r\n            if (isNaN(i) || i > 32767 || i < 0) {\r\n                notifyError(localText('Validation.Integer'), '', null);\r\n                input.val(oldText);\r\n                input.focus();\r\n                return;\r\n            }\r\n            value = i;\r\n        }\r\n        else if (input.is('select'))\r\n            value = toId(input.val());\r\n        else\r\n            value = txt;\r\n\r\n        if (!pending) {\r\n            this.pendingChanges[item.Id] = pending = {};\r\n        }\r\n\r\n        pending[field] = value;\r\n        item[field] = value;\r\n        this.view.refresh();\r\n\r\n        if (input.hasClass(\"numeric\"))\r\n            value = formatNumber(value, '0.##');\r\n\r\n        input.val(value).addClass('dirty');\r\n\r\n        this.setSaveButtonState();\r\n    }\r\n\r\n    private setSaveButtonState() {\r\n        this.toolbar.findButton('apply-changes-button').toggleClass('disabled',\r\n            Object.keys(this.pendingChanges).length === 0);\r\n    }\r\n\r\n    private saveClick() {\r\n        if (Object.keys(this.pendingChanges).length === 0) {\r\n            return;\r\n        }\r\n\r\n        // this calls save service for all modified rows, one by one\r\n        // you could write a batch update service\r\n        var keys = Object.keys(this.pendingChanges);\r\n        var current = -1;\r\n        var self = this;\r\n\r\n        (function saveNext() {\r\n            if (++current >= keys.length) {\r\n                self.refresh();\r\n                return;\r\n            }\r\n\r\n            var key = keys[current];\r\n            var entity = deepClone(self.pendingChanges[key]);\r\n            entity.Id = key;\r\n            serviceRequest(MembersService.Methods.Update, {\r\n                EntityId: key,\r\n                Entity: entity\r\n            }, (response) => {\r\n                delete self.pendingChanges[key];\r\n                saveNext();\r\n            });\r\n        })();\r\n    }\r\n\r\n    protected getQuickFilters() {\r\n        var flt = super.getQuickFilters();\r\n\r\n        var q = parseQueryString();\r\n        if (q[\"city\"]) {\r\n            var city = tryFirst(flt, x => x.field == \"CityId\");\r\n            city.init = e => {\r\n                e.element.getWidget(LookupEditor).value = q[\"city\"];\r\n            };\r\n        }\r\n\r\n        return flt;\r\n    }\r\n\r\n}\r\n", "\uFEFFimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { MembersForm, MembersRow, MembersService } from '../../ServerTypes/Behsa';\r\n\r\n@Decorators.registerClass('BehsaApp.Behsa.MembersDialog')\r\nexport class MembersDialog extends EntityDialog<MembersRow, any> {\r\n    protected getFormKey() { return MembersForm.formKey; }\r\n    protected getRowDefinition() { return MembersRow; }\r\n    protected getService() { return MembersService.baseUrl; }\r\n\r\n    protected form = new MembersForm(this.idPrefix);\r\n}"],
  "mappings": "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",
  "names": ["require_extensions", "__commonJSMin", "exports", "module", "import_q", "import_corelib", "import_q", "import_extensions", "import_corelib", "MembersDialog", "MembersForm", "MembersRow", "MembersService", "__name", "__decorateClass", "fld", "MembersRow", "MembersGrid", "container", "e", "MembersColumns", "MembersDialog", "MembersService", "buttons", "response", "ctx", "klass", "item", "pending", "value", "column", "idField", "lookup", "markup", "c", "id", "field", "columns", "num", "__name", "str", "x", "city", "CitiesRow", "cell", "input", "txt", "effective", "oldText", "i", "keys", "current", "self", "saveNext", "key", "entity", "flt", "q", "__decorateClass", "pageInit", "MembersGrid", "__name"]
}
